Home Assistant Jinja templates to stitch chunked YAML sensors into complete sections.

Prerequisites
- Call the ESPHome service esphome.wavin_publish_yaml_text_sensors to populate the chunk sensors.
- Ensure sensors like sensor.wavin_yaml_climate_1..8, sensor.wavin_yaml_battery_1..8, sensor.wavin_yaml_temperature_1..8 have non-empty states.
 - (Optional) For floor-based comfort climates: sensor.wavin_yaml_comfort_climate_1..8 will be present when floor probes are detected.
- (Optional) If you have floor probes: sensor.wavin_yaml_floor_temperature_1..8 will be present only after a valid floor reading was detected.
- (Optional) Floor limits (read-only): sensor.wavin_yaml_floor_min_temperature_1..8 and sensor.wavin_yaml_floor_max_temperature_1..8 may be used similarly once implemented.
- Each chunk sensor outputs only entity blocks (no climate:/sensor: header). The Jinja adds headers and indentation.

All-in-one (climate + sensor)
{% raw %}
{# Gather chunk sensors and indent entity blocks #}
{% set climates = states.sensor
  | selectattr('entity_id','search','_yaml_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set comfort_climates = states.sensor
  | selectattr('entity_id','search','_yaml_comfort_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set batteries = states.sensor
  | selectattr('entity_id','search','_yaml_battery_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set temps = states.sensor
  | selectattr('entity_id','search','_yaml_temperature_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set floor_temps = states.sensor
  | selectattr('entity_id','search','_yaml_floor_temperature_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | selectattr('state','ne','')
  | sort(attribute='entity_id') | list %}

climate:
{% for s in climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in comfort_climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}

sensor:
{% for s in batteries %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in temps %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% if floor_temps | length > 0 %}
  # Floor temperature sensors (only if probes detected)
{% for s in floor_temps %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% endif %}
{% endraw %}

Climate-only
{% raw %}
{% set climates = states.sensor
  | selectattr('entity_id','search','_yaml_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set comfort_climates = states.sensor
  | selectattr('entity_id','search','_yaml_comfort_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}

climate:
{% for s in climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in comfort_climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% endraw %}

Sensors-only (battery + temperature + optional floor)
{% raw %}
{% set batteries = states.sensor
  | selectattr('entity_id','search','_yaml_battery_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set temps = states.sensor
  | selectattr('entity_id','search','_yaml_temperature_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set floor_temps = states.sensor
  | selectattr('entity_id','search','_yaml_floor_temperature_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | selectattr('state','ne','')
  | sort(attribute='entity_id') | list %}

sensor:
{% for s in batteries %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in temps %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% if floor_temps | length > 0 %}
  # Floor temperature sensors
{% for s in floor_temps %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% endif %}
{% endraw %}

Comfort climate only
{% raw %}
{% set comfort_climates = states.sensor
  | selectattr('entity_id','search','_yaml_comfort_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}

climate:
{% for s in comfort_climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% endraw %}