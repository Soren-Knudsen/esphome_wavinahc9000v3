Home Assistant Jinja templates to stitch chunked YAML sensors into complete sections (supports optional comfort & group climates; floor sensor YAML removed).

Prerequisites
- Call the ESPHome service esphome.wavin_publish_yaml_text_sensors to populate the chunk sensors.
- Ensure sensors like sensor.wavin_yaml_climate_1..8, sensor.wavin_yaml_battery_1..8, sensor.wavin_yaml_temperature_1..8 have non-empty states.
- (Optional) Comfort climates: sensor.wavin_yaml_comfort_climate_1..8 appear for channels with detected floor probes.
- (Optional) Group climates: sensor.wavin_yaml_group_climate contains a standalone climate: section.
- Each chunk sensor outputs only entity blocks (no climate:/sensor: header). This template adds headers & indentation.

All-in-one (climate + sensor)
{% raw %}
{# Gather chunk sensors and indent entity blocks #}
{% set climates = states.sensor
  | selectattr('entity_id','search','_yaml_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set comfort_climates = states.sensor
  | selectattr('entity_id','search','_yaml_comfort_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set group = states.sensor
  | selectattr('entity_id','equalto','sensor.wavin_yaml_group_climate')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | list %}
{% set batteries = states.sensor
  | selectattr('entity_id','search','_yaml_battery_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set temps = states.sensor
  | selectattr('entity_id','search','_yaml_temperature_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}

climate:
{% for s in climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in comfort_climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% if group|length == 1 and group[0].state | trim %}
  # Group climates
  {{ (group[0].state | trim | replace('\n', '\n  ')) }}
{% endif %}

sensor:
{% for s in batteries %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in temps %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% endraw %}

Climate-only (includes optional comfort + group)
{% raw %}
{% set climates = states.sensor
  | selectattr('entity_id','search','_yaml_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set comfort_climates = states.sensor
  | selectattr('entity_id','search','_yaml_comfort_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set group = states.sensor
  | selectattr('entity_id','equalto','sensor.wavin_yaml_group_climate')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | list %}

climate:
{% for s in climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in comfort_climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% if group|length == 1 and group[0].state | trim %}
  # Group climates
  {{ (group[0].state | trim | replace('\n', '\n  ')) }}
{% endif %}
{% endraw %}

Sensors-only (battery + temperature)
{% raw %}
{% set batteries = states.sensor
  | selectattr('entity_id','search','_yaml_battery_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}
{% set temps = states.sensor
  | selectattr('entity_id','search','_yaml_temperature_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}

sensor:
{% for s in batteries %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% for s in temps %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% endraw %}

Comfort climate only
{% raw %}
{% set comfort_climates = states.sensor
  | selectattr('entity_id','search','_yaml_comfort_climate_')
  | selectattr('state','ne','unknown')
  | selectattr('state','ne','unavailable')
  | sort(attribute='entity_id') | list %}

climate:
{% for s in comfort_climates %}
  {{ (s.state | trim | replace('\n', '\n  ')) }}
{% endfor %}
{% endraw %}