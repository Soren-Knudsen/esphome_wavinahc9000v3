esphome:
  name: wavinahc9000v3
  friendly_name: wavinahc9000v3

esp32:
  board: esp32dev
  framework:
    type: esp-idf

external_components:
  - source:
      type: local
      path: esphome/components
    components: [wavin_ahc9000]

logger:
  level: DEBUG
  logs:
    wavin_ahc9000: DEBUG

uart:
  id: uart_wavin
  # Prefer stable UART pins (e.g. 16/17) to avoid strapping pin issues
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 38400
  stop_bits: 1
  parity: NONE

wavin_ahc9000:
  id: wavin
  uart_id: uart_wavin
  # Regular polling interval; optionally lower temporarily for quicker discovery
  update_interval: 5s
  # Optional: speed up initial discovery (uncomment briefly)
  # poll_channels_per_cycle: 8
  # update_interval: 2s
  allow_mode_writes: false

climate:
  - platform: wavin_ahc9000
    wavin_ahc9000_id: wavin
    name: "Zone 1"
    channel: 1
  - platform: wavin_ahc9000
    wavin_ahc9000_id: wavin
    name: "Living Area"
    members: [2,3]

sensor:
  - platform: wavin_ahc9000
    wavin_ahc9000_id: wavin
    name: "Zone 1 Battery"
    channel: 1
    type: battery
  - platform: wavin_ahc9000
    wavin_ahc9000_id: wavin
    name: "Zone 1 Temperature"
    channel: 1
    type: temperature

text_sensor:
  - platform: wavin_ahc9000
    wavin_ahc9000_id: wavin
    name: "Wavin YAML Suggestion"
  # Whole-entity YAML chunks for HA templating (2 entities per chunk)
  # Climate chunks
  - platform: template
    id: yaml_climate_1
    name: "Wavin YAML Climate 1"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(0, 2);
  - platform: template
    id: yaml_climate_2
    name: "Wavin YAML Climate 2"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(2, 2);
  - platform: template
    id: yaml_climate_3
    name: "Wavin YAML Climate 3"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(4, 2);
  - platform: template
    id: yaml_climate_4
    name: "Wavin YAML Climate 4"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(6, 2);
  - platform: template
    id: yaml_climate_5
    name: "Wavin YAML Climate 5"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(8, 2);
  - platform: template
    id: yaml_climate_6
    name: "Wavin YAML Climate 6"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(10, 2);
  - platform: template
    id: yaml_climate_7
    name: "Wavin YAML Climate 7"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(12, 2);
  - platform: template
    id: yaml_climate_8
    name: "Wavin YAML Climate 8"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_climate_chunk(14, 2);

  # Battery chunks
  - platform: template
    id: yaml_battery_1
    name: "Wavin YAML Battery 1"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(0, 2);
  - platform: template
    id: yaml_battery_2
    name: "Wavin YAML Battery 2"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(2, 2);
  - platform: template
    id: yaml_battery_3
    name: "Wavin YAML Battery 3"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(4, 2);
  - platform: template
    id: yaml_battery_4
    name: "Wavin YAML Battery 4"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(6, 2);
  - platform: template
    id: yaml_battery_5
    name: "Wavin YAML Battery 5"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(8, 2);
  - platform: template
    id: yaml_battery_6
    name: "Wavin YAML Battery 6"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(10, 2);
  - platform: template
    id: yaml_battery_7
    name: "Wavin YAML Battery 7"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(12, 2);
  - platform: template
    id: yaml_battery_8
    name: "Wavin YAML Battery 8"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_battery_chunk(14, 2);

  # Temperature chunks
  - platform: template
    id: yaml_temperature_1
    name: "Wavin YAML Temperature 1"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(0, 2);
  - platform: template
    id: yaml_temperature_2
    name: "Wavin YAML Temperature 2"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(2, 2);
  - platform: template
    id: yaml_temperature_3
    name: "Wavin YAML Temperature 3"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(4, 2);
  - platform: template
    id: yaml_temperature_4
    name: "Wavin YAML Temperature 4"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(6, 2);
  - platform: template
    id: yaml_temperature_5
    name: "Wavin YAML Temperature 5"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(8, 2);
  - platform: template
    id: yaml_temperature_6
    name: "Wavin YAML Temperature 6"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(10, 2);
  - platform: template
    id: yaml_temperature_7
    name: "Wavin YAML Temperature 7"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(12, 2);
  - platform: template
    id: yaml_temperature_8
    name: "Wavin YAML Temperature 8"
    update_interval: never
    lambda: |-
      return id(wavin).get_yaml_temperature_chunk(14, 2);

api:
  services:
    - service: wavin_strict_heat
      variables:
        channel: int
      then:
        - lambda: |-
            // Force baseline 0x4000 on the selected channel
            id(wavin).normalize_channel_config(channel, false);
    - service: wavin_generate_yaml
      then:
        - lambda: |-
            id(wavin).generate_yaml_suggestion();
    - service: wavin_publish_yaml_text_sensors
      then:
        - lambda: |-
            id(wavin).generate_yaml_suggestion();
            id(yaml_climate_1).publish_state(id(wavin).get_yaml_climate_chunk(0, 2));
            id(yaml_climate_2).publish_state(id(wavin).get_yaml_climate_chunk(2, 2));
            id(yaml_climate_3).publish_state(id(wavin).get_yaml_climate_chunk(4, 2));
            id(yaml_climate_4).publish_state(id(wavin).get_yaml_climate_chunk(6, 2));
            id(yaml_climate_5).publish_state(id(wavin).get_yaml_climate_chunk(8, 2));
            id(yaml_climate_6).publish_state(id(wavin).get_yaml_climate_chunk(10, 2));
            id(yaml_climate_7).publish_state(id(wavin).get_yaml_climate_chunk(12, 2));
            id(yaml_climate_8).publish_state(id(wavin).get_yaml_climate_chunk(14, 2));
            id(yaml_battery_1).publish_state(id(wavin).get_yaml_battery_chunk(0, 2));
            id(yaml_battery_2).publish_state(id(wavin).get_yaml_battery_chunk(2, 2));
            id(yaml_battery_3).publish_state(id(wavin).get_yaml_battery_chunk(4, 2));
            id(yaml_battery_4).publish_state(id(wavin).get_yaml_battery_chunk(6, 2));
            id(yaml_battery_5).publish_state(id(wavin).get_yaml_battery_chunk(8, 2));
            id(yaml_battery_6).publish_state(id(wavin).get_yaml_battery_chunk(10, 2));
            id(yaml_battery_7).publish_state(id(wavin).get_yaml_battery_chunk(12, 2));
            id(yaml_battery_8).publish_state(id(wavin).get_yaml_battery_chunk(14, 2));
            id(yaml_temperature_1).publish_state(id(wavin).get_yaml_temperature_chunk(0, 2));
            id(yaml_temperature_2).publish_state(id(wavin).get_yaml_temperature_chunk(2, 2));
            id(yaml_temperature_3).publish_state(id(wavin).get_yaml_temperature_chunk(4, 2));
            id(yaml_temperature_4).publish_state(id(wavin).get_yaml_temperature_chunk(6, 2));
            id(yaml_temperature_5).publish_state(id(wavin).get_yaml_temperature_chunk(8, 2));
            id(yaml_temperature_6).publish_state(id(wavin).get_yaml_temperature_chunk(10, 2));
            id(yaml_temperature_7).publish_state(id(wavin).get_yaml_temperature_chunk(12, 2));
            id(yaml_temperature_8).publish_state(id(wavin).get_yaml_temperature_chunk(14, 2));
    # One-button: send multiple notifications with whole-entity chunks (2 per notification)
    - service: wavin_notify_yaml_chunks
      then:
        # Ensure latest suggestion
        - lambda: |-
            id(wavin).generate_yaml_suggestion();
        # Climate chunks (2 per notification)
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 0;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 1)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(0, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 2;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 2)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(2, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 4;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 3)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(4, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 6;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 4)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(6, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 8;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 5)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(8, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 10;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 6)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(10, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 12;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 7)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(12, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 14;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (climate 8)
                    message: !lambda 'return id(wavin).get_yaml_climate_chunk(14, 2);'

        # Battery sensor chunks (2 per notification)
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 0;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 1)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(0, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 2;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 2)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(2, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 4;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 3)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(4, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 6;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 4)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(6, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 8;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 5)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(8, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 10;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 6)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(10, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 12;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 7)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(12, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 14;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (battery 8)
                    message: !lambda 'return id(wavin).get_yaml_battery_chunk(14, 2);'

        # Temperature sensor chunks (2 per notification)
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 0;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 1)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(0, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 2;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 2)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(2, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 4;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 3)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(4, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 6;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 4)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(6, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 8;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 5)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(8, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 10;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 6)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(10, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 12;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 7)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(12, 2);'
        - if:
            condition:
              lambda: 'return id(wavin).get_yaml_active_count() > 14;'
            then:
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Wavin YAML (temperature 8)
                    message: !lambda 'return id(wavin).get_yaml_temperature_chunk(14, 2);'
  # (Legacy split services removed in favor of chunked whole-entity notifications)

    # Optional: write YAML into an input_text (create input_text.wavin_yaml in HA first)
    # - service: wavin_write_yaml_to_input_text
    #   then:
    #     - homeassistant.service:
    #         service: input_text.set_value
    #         data:
    #           entity_id: input_text.wavin_yaml
    #           value: !lambda |-
    #             return id(wavin).get_yaml_suggestion().c_str();

wifi:
  ssid: "<your-ssid>"
  password: "<your-password>"

ota:
